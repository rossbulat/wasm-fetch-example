[package]
name = "wasm-fetch-example"
version = "0.1.0"
authors = ["Ross Bulat <ross@jkrbinvestments.com>"]
edition = "2018"
description = "An example Rust based WebAssembly project implementing a fetch request via wasm-bindgen."
license = "MIT"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
futures = { version = "0.1.26", default-features = false }
wasm-bindgen = { version = "0.2.50", features = ["serde-serialize"]  }
js-sys = "0.3.27"
wasm-bindgen-futures = "0.3.27"
serde = { version = "1.0.80", features = ["derive"] }
serde_derive = "^1.0.59"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
# originally version 0.1.1
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.2", optional = true }

[dependencies.web-sys]
version = "0.3.4"
features = [
  'Headers',
  'Request',
  'RequestInit',
  'RequestMode',
  'Response',
  'Window',
]

[dev-dependencies]
wasm-bindgen-test = "0.2"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
lto = true